// Generated by CoffeeScript 1.10.0
var setPictureFrame;

window.$ = require("jquery");

window.SurfaceUtil = require("./SurfaceUtil");

setPictureFrame = function(element, description) {
  var fieldset, legend;
  fieldset = document.createElement('fieldset');
  legend = document.createElement('legend');
  legend.appendChild(document.createTextNode(description));
  fieldset.appendChild(legend);
  fieldset.appendChild(element);
  fieldset.style.display = 'inline-block';
  fieldset.style.backgroundColor = "#D2E0E6";
  document.body.appendChild(fieldset);
};

QUnit.module('SurfaceUtil');

console.info("Worker:", Worker);


/*
  QUnit.test 'chromakey_snipet speed test', (assert) ->
    done = assert.async()
    Promise.all([
      SurfaceUtil.fetchImageFromURL("src/surface0.png")
      SurfaceUtil.fetchArrayBuffer("src/surface0.png")
    ]).then ([img, buffer])->
      workers = [1..2].map ->
        new InlineServerWorker [
          "../bower_components/jszip/dist/jszip.min.js"
          "../bower_components/PNG.ts/dist/PNG.js"
        ], (conn)->
          conn.on "getImageData", (buffer, reply)->
            reader = new PNG.PNGReader(buffer)
            reader.deflate = JSZip.compressions.DEFLATE.uncompress
            decoded = reader.parse().getUint8ClampedArray()
            reply(decoded, [decoded.buffer]);
      return Promise.all(
        workers.map (worker)-> worker.load()
      ).then (workers)->
        start = performance.now()
        return Promise.all(
          [1..100].map (i)-> workers[i%workers.length].request("getImageData", buffer)
        ).then (results)->
          stop = performance.now()
          TotalWorkerTime = stop - start
          assert.ok TotalWorkerTime, "Worker並列数2でPNG.ts deflate"
          return [img, buffer]
    .then ([img, buffer])->
      test = ->
        start = performance.now()
        reader = new PNG.PNGReader(buffer)
        reader.deflate = JSZip.compressions.DEFLATE.uncompress
        decoded = reader.parse().getUint8ClampedArray()
        stop = performance.now()
        PNGTSTime = stop - start
        cnv = SurfaceUtil.copy(img)
        ctx = cnv.getContext("2d")
        start = performance.now()
        imgdata = ctx.getImageData(0, 0, cnv.width, cnv.height);
        stop = performance.now()
        getImageDataTime = stop - start
        start = performance.now()
        SurfaceUtil.chromakey_snipet(imgdata.data)
        stop = performance.now()
        chromakeyTime = stop - start
        start = performance.now()
        ctx.putImageData(imgdata, 0, 0)
        stop = performance.now()
        putImageDataTime = stop - start
        {PNGTSTime, getImageDataTime, chromakeyTime, putImageDataTime}
      results = [1..100].map -> test()
      PNGTSTimes = results.map (a)-> a.PNGTSTime
      getImageDataTimes = results.map (a)-> a.getImageDataTime
      putImageDataTimes = results.map (a)-> a.putImageDataTime
      chromakeyTimes = results.map (a)-> a.chromakeyTime
      TotalPNGTSTime = PNGTSTimes.reduce (a,b)-> a+b
      TotalGetImageDataTime = getImageDataTimes.reduce (a,b)-> a+b
      TotalPutImageDataTime = putImageDataTimes.reduce (a,b)-> a+b
      TotalChromakeyTime = chromakeyTimes.reduce (a,b)-> a+b
      assert.ok TotalPNGTSTime, "UIスレッドでPNG.ts deflate"
      assert.ok TotalGetImageDataTime, "UIスレッドでgetImageData"
      assert.ok TotalPutImageDataTime
      assert.ok TotalChromakeyTime
      done()
    .catch (err)-> console.info(err, err.stack); done()
 */

QUnit.test('SurfaceUtil.parseDescript', function(assert) {
  var dic, text;
  text = "charset,Shift_JIS\ncraftman,Cherry Pot\ncraftmanw,Cherry Pot\ncraftmanurl,http://3rd.d-con.mydns.jp/cherrypot/\ntype,shell\nname,the \"MobileMaster\"\n\nsakura.balloon.offsetx,21\nsakura.balloon.offsety,80\nkero.balloon.offsetx,10\nkero.balloon.offsety,20\n\nseriko.alignmenttodesktop,free\nseriko.paint_transparent_region_black,0\nseriko.use_self_alpha,1";
  dic = SurfaceUtil.parseDescript(text);
  assert.ok(dic["charset"] === "Shift_JIS");
  assert.ok(dic["sakura.balloon.offsetx"] === "21");
  return assert.ok(dic["seriko.paint_transparent_region_black"] === "0");
});

QUnit.test("SurfaceUtil.convert, SurfaceUtil.fetchArrayBuffer", function(assert) {
  var done;
  assert.expect(1);
  done = assert.async();
  return SurfaceUtil.fetchArrayBuffer("./src/readme.txt").then(function(buffer) {
    var txt;
    txt = SurfaceUtil.convert(buffer);
    assert.ok(txt.match(/フリーシェル 「窗子」（MADOKO）を改変の上使用しています。/) !== null);
    return done();
  })["catch"](function(err) {
    console.info(err, err.stack);
    return done();
  });
});

QUnit.test("SurfaceUtil.find", function(assert) {
  var paths, results;
  paths = ["surface0.png", "surface10.png", "elements/element0.png"];
  results = SurfaceUtil.find(paths, "./surface0.png");
  assert.ok(results[0] === paths[0]);
  results = SurfaceUtil.find(paths, "SURFACE10.PNG");
  assert.ok(results[0] === paths[1]);
  results = SurfaceUtil.find(paths, "elements\\element0.png");
  return assert.ok(results[0] === paths[2]);
});

QUnit.test("SurfaceUtil.choice", function(assert) {
  var i, ref, ref1, ref2, results;
  results = (function() {
    var j, results1;
    results1 = [];
    for (i = j = 1; j <= 1000; i = ++j) {
      results1.push(SurfaceUtil.choice([1, 2, 3]));
    }
    return results1;
  })();
  assert.ok((0.2 < (ref = results.reduce((function(count, val) {
    if (val === 1) {
      return count + 1;
    } else {
      return count;
    }
  }), 0) / results.length) && ref < 0.4));
  assert.ok((0.2 < (ref1 = results.reduce((function(count, val) {
    if (val === 2) {
      return count + 1;
    } else {
      return count;
    }
  }), 0) / results.length) && ref1 < 0.4));
  return assert.ok((0.2 < (ref2 = results.reduce((function(count, val) {
    if (val === 3) {
      return count + 1;
    } else {
      return count;
    }
  }), 0) / results.length) && ref2 < 0.4));
});

QUnit.test("SurfaceUtil.copy", function(assert) {
  var cnv, cnv2, ctx;
  cnv = document.createElement("canvas");
  cnv.width = cnv.height = 100;
  ctx = cnv.getContext("2d");
  ctx.strokeStyle = "black";
  ctx.rect(10, 10, 80, 80);
  ctx.stroke();
  cnv2 = SurfaceUtil.copy(cnv);
  assert.ok(cnv !== cnv2);
  assert.ok(cnv.width === cnv2.width);
  assert.ok(cnv.height === cnv2.height);
  setPictureFrame(cnv, "SurfaceUtil.copy cnv");
  return setPictureFrame(cnv2, "SurfaceUtil.copy cnv2");
});

QUnit.test("SurfaceUtil.fetchImageFromURL, SurfaceUtil.fetchImageFromArrayBuffer", function(assert) {
  var done;
  done = assert.async();
  assert.expect(2);
  return SurfaceUtil.fetchArrayBuffer("src/surface0.png").then(function(buffer) {
    return SurfaceUtil.fetchImageFromArrayBuffer(buffer);
  }).then(function(img) {
    assert.ok(img.width === 182);
    assert.ok(img.height === 445);
    setPictureFrame(img, "SurfaceUtil.fetchImageFromURL");
    return done();
  })["catch"](function(err) {
    console.info(err, err.stack);
    return done();
  });
});

QUnit.test("SurfaceUtil.random, SurfaceUtil.periodic SurfaceUtil.always (wait 10 sec)", function(assert) {
  var done, endtime;
  done = assert.async();
  assert.expect(3);
  endtime = Date.now() + 1000 * 10;
  return Promise.all([
    new Promise(function(resolve, reject) {
      var count, func;
      count = 0;
      func = function(next) {
        if (endtime < Date.now()) {
          assert.ok((4 <= count && count <= 6), "random, 2");
          return resolve();
        }
        count++;
        return next();
      };
      return SurfaceUtil.random(func, 2);
    }), new Promise(function(resolve, reject) {
      var count, func;
      count = 0;
      func = function(next) {
        if (endtime < Date.now()) {
          assert.ok((4 <= count && count <= 6), "periodic");
          return resolve();
        }
        count++;
        return next();
      };
      return SurfaceUtil.periodic(func, 2);
    }), new Promise(function(resolve, reject) {
      var count, func;
      count = 0;
      func = function(next) {
        if (endtime < Date.now()) {
          assert.ok((9 <= count && count <= 11), "always");
          return resolve();
        }
        count++;
        return setTimeout(next, 1000);
      };
      return SurfaceUtil.always(func);
    })
  ]).then(done);
});

QUnit.test("SurfaceUtil.isHit", function(assert) {
  var cnv, ctx;
  cnv = document.createElement("canvas");
  cnv.width = cnv.height = 100;
  ctx = cnv.getContext("2d");
  ctx.fillStyle = "black";
  ctx.rect(10, 10, 80, 80);
  ctx.fill();
  assert.ok(SurfaceUtil.isHit(cnv, 5, 5) === false);
  assert.ok(SurfaceUtil.isHit(cnv, 50, 50) === true);
  return setPictureFrame(cnv, "SurfaceUtil.isHit cnv");
});

QUnit.test("SurfaceUtil.createCanvas", function(assert) {
  var cnv;
  cnv = SurfaceUtil.createCanvas();
  assert.ok(cnv instanceof HTMLCanvasElement);
  assert.ok(cnv.width === 1);
  assert.ok(cnv.height === 1);
  return setPictureFrame(cnv, "SurfaceUtil.createCanvas");
});

QUnit.test("SurfaceUtil.scope", function(assert) {
  assert.ok("sakura" === SurfaceUtil.scope(0));
  assert.ok("kero" === SurfaceUtil.scope(1));
  return assert.ok("char2" === SurfaceUtil.scope(2));
});

QUnit.test("SurfaceUtil.unscope", function(assert) {
  assert.ok(0 === SurfaceUtil.unscope("sakura"));
  assert.ok(1 === SurfaceUtil.unscope("kero"));
  return assert.ok(2 === SurfaceUtil.unscope("char2"));
});

QUnit.test("SurfaceUtil.getEventPosition", function(assert) {
  var handler;
  $(document.body).click(handler = function(ev) {
    var clientX, clientY, pageX, pageY, ref, screenX, screenY;
    ref = SurfaceUtil.getEventPosition(ev), pageX = ref.pageX, pageY = ref.pageY, clientX = ref.clientX, clientY = ref.clientY, screenX = ref.screenX, screenY = ref.screenY;
    assert.ok(100 === pageX);
    assert.ok(100 === pageY);
    assert.ok(100 === clientX);
    assert.ok(100 === clientY);
    assert.ok(100 === screenX);
    assert.ok(100 === screenY);
    return $(document.body).off("click", handler);
  });
  return document.body.dispatchEvent(new MouseEvent("click", {
    screenX: 100,
    screenY: 100,
    clientX: 100,
    clientY: 100,
    pageX: 100,
    pageY: 100
  }));
});

QUnit.test("SurfaceUtil.init", function(assert) {
  var done;
  done = assert.async();
  return SurfaceUtil.fetchImageFromURL("src/surface0.png").then(function(img) {
    var cnv, ctx;
    cnv = SurfaceUtil.createCanvas();
    ctx = cnv.getContext("2d");
    SurfaceUtil.init(cnv, ctx, img);
    assert.ok(cnv.width === 182);
    assert.ok(cnv.height === 445);
    return done();
  });
});


/*
QUnit.test "SurfaceUtil.log", (assert)->
  assert.ok false, "まだ書いてない"

QUnit.test "SurfaceUtil.getRegion", (assert)->
  assert.ok false, "まだ書いてない"
fastcopy

fastfind
chromakey_snipet
 */

QUnit.test("SurfaceUtil.randomRange", function(assert) {
  var histgram, j, results, results1;
  assert.expect(10);
  results = (function() {
    results1 = [];
    for (j = 1; j <= 1000; j++){ results1.push(j); }
    return results1;
  }).apply(this).map(function() {
    return SurfaceUtil.randomRange(0, 9);
  });
  histgram = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(function(i) {
    return results.filter(function(a) {
      return a === i;
    });
  });
  return histgram.forEach(function(arr, i) {
    var parsent;
    parsent = arr.length / 10;
    return assert.ok((5 <= parsent && parsent <= 15), i);
  });
});

QUnit.test("SurfaceUtil.pna", function(assert) {
  var done;
  done = assert.async();
  return Promise.all([SurfaceUtil.fetchImageFromURL("src/surface0730.png"), SurfaceUtil.fetchImageFromURL("src/surface0730.pna")]).then(function(arg) {
    var pna, png, srfCnv;
    png = arg[0], pna = arg[1];
    srfCnv = SurfaceUtil.pna({
      cnv: null,
      png: png,
      pna: pna
    });
    assert.ok(srfCnv.cnv.width === 80);
    assert.ok(srfCnv.cnv.height === 90);
    setPictureFrame(srfCnv.cnv, "pna");
    return done();
  });
});

QUnit.test("SurfaceUtil.getScrollXY", function(assert) {
  var ref, scrollX, scrollY;
  ref = SurfaceUtil.getScrollXY(), scrollX = ref.scrollX, scrollY = ref.scrollY;
  assert.ok(scrollX === 0);
  return assert.ok(scrollY === 0);
});
