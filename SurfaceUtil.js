// Generated by CoffeeScript 1.7.1
var SurfaceUtil;

SurfaceUtil = (function() {
  function SurfaceUtil(cnv) {
    this.cnv = cnv;
    this.ctx = this.cnv.getContext("2d");
  }

  SurfaceUtil.prototype.composeElements = function(elements) {
    var canvas, copyed, offsetX, offsetY, type, x, y, _ref;
    if (elements.length === 0) {
      return;
    }
    _ref = elements[0], canvas = _ref.canvas, type = _ref.type, x = _ref.x, y = _ref.y;
    offsetX = offsetY = 0;
    switch (type) {
      case "base":
        this.overlayfast(canvas, offsetX, offsetY);
        break;
      case "overlay":
        this.overlayfast(canvas, offsetX + x, offsetY + y);
        break;
      case "overlayfast":
        this.overlayfast(canvas, offsetX + x, offsetY + y);
        break;
      case "replace":
        this.overlayfast(canvas, offsetX + x, offsetY + y);
        break;
      case "move":
        offsetX = x;
        offsetY = y;
        copyed = SurfaceUtil.copy(this.cnv);
        SurfaceUtil.clear(this.cnv);
        this.overlayfast(copyed, offsetX, offsetY);
        break;
      default:
        console.error(elements[0]);
        this.cnv;
    }
    this.composeElements(elements.slice(1));
    return void 0;
  };

  SurfaceUtil.prototype.overlayfast = function(part, x, y) {
    this.ctx.drawImage(part, x || 0, y || 0);
    this.cnv;
    return void 0;
  };

  SurfaceUtil.prototype.init = function(cnv) {
    this.cnv.width = cnv.width;
    this.cnv.height = cnv.height;
    this.overlayfast(cnv, 0, 0);
    return void 0;
  };

  SurfaceUtil.clear = function(cnv) {
    cnv.width = cnv.width;
    return void 0;
  };

  SurfaceUtil.copy = function(cnv) {
    var copy, ctx;
    copy = document.createElement("canvas");
    ctx = copy.getContext("2d");
    copy.width = cnv.width;
    copy.height = cnv.height;
    ctx.drawImage(cnv, 0, 0);
    return copy;
  };

  SurfaceUtil.transImage = function(img) {
    var a, b, cnv, ctx, data, g, i, imgdata, r;
    cnv = SurfaceUtil.copy(img);
    ctx = cnv.getContext("2d");
    imgdata = ctx.getImageData(0, 0, img.width, img.height);
    data = imgdata.data;
    r = data[0], g = data[1], b = data[2], a = data[3];
    i = 0;
    if (a !== 0) {
      while (i < data.length) {
        if (r === data[i] && g === data[i + 1] && b === data[i + 2]) {
          data[i + 3] = 0;
        }
        i += 4;
      }
    }
    ctx.putImageData(imgdata, 0, 0);
    return cnv;
  };

  SurfaceUtil.loadImage = function(url, callback) {
    var img;
    img = new Image;
    img.src = url;
    img.addEventListener("load", function() {
      return callback(null, img);
    });
    img.addEventListener("error", function(ev) {
      console.error(ev);
      return callback(ev.error, null);
    });
    return void 0;
  };

  return SurfaceUtil;

})();
