(function(global){
'use strict';(function(h) {
  var k = {StringToDataURI:function(d, e, b) {
    var c = new FileReader;
    c.addEventListener("loadend", function() {
      var a = c.result.replace(";base64,", ";charset=utf-8;base64,");
      b(null, a);
    });
    c.addEventListener("error", function(a) {
      a = Error(a.target.error.name + ": " + a.target.error.message);
      console.info(a);
      b(a, "");
    });
    c.readAsDataURL(new Blob([d], {type:e}));
  }, DataURIToString:function(d, e) {
    if (/^data\:.*?base64\,.+/.test(d)) {
      for (var b = d.split(","), c = b[0].split(":")[1].split(";")[0], b = atob(b[1]), a = new Uint8Array(b.length), f = 0;f < a.length;f++) {
        a[f] = b.charCodeAt(f);
      }
      var g = new FileReader;
      g.addEventListener("loadend", function() {
        e(null, g.result);
      });
      g.addEventListener("error", function(a) {
        a = Error(a.target.error.name + ": " + a.target.error.message);
        console.info(a);
        e(a, "");
      });
      g.readAsText(new Blob([a.buffer], {type:c}));
    } else {
      setTimeout(function() {
        e(Error("Unvalid format. " + d), "");
      });
    }
  }};
  "process" in h && (module.exports = k);
  h["WMDataURIScheme" in h ? "WMDataURIScheme_" : "WMDataURIScheme"] = k;
})((this || 0).self || global);

})((this||0).self||global);
